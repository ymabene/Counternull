install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="C:/Program Files/R/R-4.0.2/library")
stand_res<-rstandard(lmout)
dev.new(width=7, height=7, unit="in")
par(mfrow=c(3,2))
qqnorm(stand_res)
qqline(stand_res)
plot(test_one,stand_res, xlab = "Test One Scores", ylab = "Standard Residuals", main= "Standard Residuals VS Test One Scores", xlim = c(60,150), ylim=c(-3,3))
abline(h=0)
plot(test_two,stand_res, xlab = "Test Two Scores", ylab = "Standard Residuals", main= "Standard Residuals VS Test Two Scores", xlim = c(60,150), ylim=c(-3,3))
abline(h=0)
plot(test_three,stand_res, xlab = "Test Three Scores", ylab = "Standard Residuals", main= "Standard Residuals VS Test Three Scores")
abline(h=0)
plot(test_four,stand_res, xlab = "Test Four Scores", ylab = "Standard Residuals", main= "Standard Residuals VS Test Four Scores")
abline(h=0)
plot(lmout$fitted.values,stand_res, xlab = "Fitted Job Proficiency Scores", ylab = "Standard Residuals",
main= "Standard Residuals VS Fitted Job Proficieny Scores")
abline(h=0)
library(Counternull)
View(rand_matrix_1DS)
View(rand_matrix_1D)
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
counternull_value<-2*test_stat # estimated counternull value
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
permutation_counter_function,low,
high,test_stat,
variable,iterations,pairs){
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
while (low <= high) {
counter_samples<-create_counternull_distribution_no_hist(sample_data,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
if (extreme==0){ # larger test statistics are more extreme.
pval<-sum(counter_samples>=(test_stat))/iterations
} else { # smaller test statistics are more extreme
pval<-sum(counter_samples<=(test_stat))/iterations
}
if (pval == obs_pval) { # counternull value is identified
start<-counternull_value
# find counternull range
counternull_values<-find_counternull_set(obs_pval,sample_data,extreme,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
unique(counternull_values)
sort(counternull_values)
print(unique(counternull_values))
# create histograms
perm_samples<-create_null_distribution(sample_data,extreme,rand_matrix,
permutation_null_function,test_stat,
variable,
iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main = paste("Null Distribution"), xlab = "Test Statistics")
counter_hist<-hist(counter_samples,breaks=100,col = "goldenrod",
main = paste("Counternull Distribution"),
xlab = "Test Statistics")
range<-c(perm_samples,counter_samples)
max_range<-max(range)
min_range<-min(range)
plot(null_hist, col="gold", xlim=c(min_range,max_range),
main = paste("Counternull and Null Distribution"),
xlab = "Test Statistics")  # first histogram
plot(counter_hist, col="goldenrod", xlim=c(min_range,max_range),add=T)  # second
abline(v=test_stat,col="black",lty=2, lwd=5)
abline(v=start,col="red",lty=2, lwd=5)
abline(v=0,col="gray",lty=2, lwd=5)
break
} else if (pval < obs_pval) {
if (extreme==0){
low<-counternull_value + 1 # only search larger numbers
} else {
high<-counternull_value - 1 # only search smaller numbers
}
counternull_value<-(low + high)%/%2
} else {  # pval > obs_pval
if (extreme==0){
high<-counternull_value - 1 # only search smaller numbers
} else {
low<-counternull_value - 1 # only search larger numbers
}
counternull_value<-(low + high)%/%2
}
}
if(low > high){ # no remaining numbers to search
print("No Counternull Values found.")
perm_samples<-create_null_distribution(sample_data,extreme,
rand_matrix,
permutation_null_function,
test_stat,
variable,iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold")
plot(null_hist, col="gold",xlim=c(-15000,15000),
main = paste("Null Distribution"),
xlab = "Test Statistics")  # first histogram
abline(v=test_stat,col="black",lty=2, lwd=5)
return(0)
}
return(invisible(counter_samples))
}
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
counternull_value<-2*test_stat # estimated counternull value
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
permutation_counter_function,low,
high,test_stat,
variable,iterations,pairs){
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
while (low <= high) {
counter_samples<-create_counternull_distribution_no_hist(sample_data,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
if (extreme==0){ # larger test statistics are more extreme.
pval<-sum(counter_samples>=(test_stat))/iterations
} else { # smaller test statistics are more extreme
pval<-sum(counter_samples<=(test_stat))/iterations
}
if (pval == obs_pval) { # counternull value is identified
start<-counternull_value
# find counternull range
counternull_values<-find_counternull_set(obs_pval,sample_data,extreme,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
unique(counternull_values)
sort(counternull_values)
print(unique(counternull_values))
# create histograms
perm_samples<-create_null_distribution(sample_data,extreme,rand_matrix,
permutation_null_function,test_stat,
variable,
iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main = paste("Null Distribution"), xlab = "Test Statistics")
counter_hist<-hist(counter_samples,breaks=100,col = "goldenrod",
main = paste("Counternull Distribution"),
xlab = "Test Statistics")
range<-c(perm_samples,counter_samples)
max_range<-max(range)
min_range<-min(range)
plot(null_hist, col="gold", xlim=c(min_range,max_range),
main = paste("Counternull and Null Distribution"),
xlab = "Test Statistics")  # first histogram
plot(counter_hist, col="goldenrod", xlim=c(min_range,max_range),add=T)  # second
abline(v=test_stat,col="black",lty=2, lwd=5)
abline(v=start,col="red",lty=2, lwd=5)
abline(v=0,col="gray",lty=2, lwd=5)
break
} else if (pval < obs_pval) {
if (extreme==0){
low<-counternull_value + 1 # only search larger numbers
} else {
high<-counternull_value - 1 # only search smaller numbers
}
counternull_value<-(low + high)%/%2
} else {  # pval > obs_pval
if (extreme==0){
high<-counternull_value - 1 # only search smaller numbers
} else {
low<-counternull_value - 1 # only search larger numbers
}
counternull_value<-(low + high)%/%2
}
}
if(low > high){ # no remaining numbers to search
print("No Counternull Values found.")
perm_samples<-create_null_distribution(sample_data,extreme,
rand_matrix,
permutation_null_function,
test_stat,
variable,iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold")
plot(null_hist, col="gold",xlim=c(-15000,15000),
main = paste("Null Distribution"),
xlab = "Test Statistics")  # first histogram
abline(v=test_stat,col="black",lty=2, lwd=5)
return(0)
}
return(invisible(counter_samples))
}
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
n
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
library(Counternull)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-2000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
0,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
permutation_counter_diff_means(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
test<-permutation_counter_diff_means(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
print(sum(test>=(test_stat))/iterations)
print(sum(test>=(-2215))/128)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
print(test_stat)
library(Counternull)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-2000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_counter_diff_means,
-2000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_counter_diff_means,
-4000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-4000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
4000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-4000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
100,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
1,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
0,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
counter<-permutation_counter_diff_means(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
null<-create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
print(ccounter)
print(counter)
print(null)
null<-create_null_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
print(null)
create_null_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
null-counter
null<-create_null_distribution(sample_district_1DS,1,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
counter<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
0,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
df<-data.frame("c" = counter, "n" = null )
View(df)
c_2<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
1,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
print(c_2)
c_3<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
100,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
c_4<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
1000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
c_5<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-1,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
c_6<-create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-1000,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
df<-data.frame("c" = counter, "n" = null, "c1" = c_2, "c100" = c_3, "c1000" = c_4, "c-1" = c_5, "c-1000" = c_6 )
t<-create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
print(t)
View(rand_matrix_1DS)
rand_matrix_1DS[,1]
rand_matrix_1DS[,24]
rand_matrix_1DS[,121]
View(df)
rand_matrix_1DS[,15]
View(sample_district_1DS)
01100101011010
View(df)
View(rand_matrix_1DS)
library(Counternull)
library(Counternull)
library(Counternull)
sample_district_1DS$Z
sample_district_1DS[,1]
sample_district_1DS$Z[2]
sample_district_1DS[1,2]
sample_district_1DS[2,1]
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
library(Counternull)
find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
print(find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre))
library(Counternull)
find_test_stat_paired_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
print(find_test_stat_paired_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre))
library(Counternull)
