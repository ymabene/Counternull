theme(plot.margin = margin(20, 20, 20, 20))
# display plot
p
bw = length(x$null_dist)/3
distribution_test_statistics = x$null_dist
t = tibble(distribution_test_statistics = x$null_dist)
p =
ggplot(t, aes(x = distribution_test_statistics)) +
geom_histogram(colour = "white", fill = "steelblue2",
binwidth = bw, alpha = .7) +
geom_vline(xintercept = x$t_obs,
linewidth = 1.5,
colour = "black") +
xlab("Permuted Test Statistics") + ylab("Counts")  +
ggtitle("Null Randomization Distribution") +
theme_classic() +
theme(plot.margin = margin(20, 20, 20, 20))
# display plot
p
devtools::load_all(".")
expected_two = create_fisher_interval(t_r)
debug(fisher_binary)
expected_two = create_fisher_interval(t_r)
debug(create_fisher_interval)
expected_two = create_fisher_interval(t_r)
expected_two = create_fisher_interval(t_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
undebug(fisher_binary)
expected_two = create_fisher_interval(t_r)
summary(expected_two)
plot(expected_two)
.05/2
1-.025
.025*888
22.2/888
v =vector(length = 2)
v[1] = 2
v[2] = 4
a = 3
ls = list(v,a)
ls
ls[1]
ls[2]
library(Counternull)
y = sample_data$turn_angle
w = sample_data$w
t_r = create_null_rand(y,w, sample_matrix, fun = fun)
create_fisher_interval(t_r)
devtools::load_all(".")
create_fisher_interval(t_r)
expected_two = create_fisher_interval(t_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debug(fisher_binary)
expected_two = create_fisher_interval(t_r)
search[1]
search[10000]
bounds[1]
bounds[1] == NULL
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
expected_two = create_fisher_interval(t_r)
ls = list(bounds, c(pvalue_lower, pvalue_upper))
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
expected_two = create_fisher_interval(t_r)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
expected_two = create_fisher_interval(t_r)
expected_two = create_fisher_interval(t_r)
pval_bounds[1] != (alpha/2)
pval_bounds
pval_bounds[1]
pval_bounds[1][1]
unlist(ls[2])
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
expected_two = create_fisher_interval(t_r)
pval_bounds[1] != (alpha/2)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
expected_two = create_fisher_interval(t_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
covr::report()
y = sample_data$turn_angle
w = sample_data$w
func = function(x,y){
return(6)
}
t_l = create_null_rand(y, w, sample_matrix,
fun = func, alternative = "less")
covr:report()
covr::report()
y = c(2,4,6,1,2,3)
w = c(1,1,1,0,0,0)
r = create_randomization_matrix(6,20)
devtools::load_all(".")
y = c(2,4,6,1,2,3)
w = c(1,1,1,0,0,0)
r = create_randomization_matrix(6,20)
func_four = function(x,y){
return(invisible(3))
}
expected = create_null_rand(y,w,r,fun = func_four,
alternative = c("less"))
summary(expected)
plot(expected)
debug(plot.null_rand)
plot(expected)
y = sample_data$turn_angle
w = sample_data$w
n_r = create_null_rand(y,w, sample_matrix, test_stat = c("diffmeans"))
n_r$null_dist
sum(n_r$null_dist <= 3)
q = find_counternull_values(n_r, c(15,15))
summary(q)
q = find_counternull_values(n_r, c(17.5,18))
summary(q)
y = sample_data$turn_angle
w = sample_data$w
n_one = create_null_rand(y, w, sample_matrix, test_stat = c("t"))
n_two = create_null_rand(y, w, sample_matrix, fun = fun,
alternative = c("less"))
adjust_pvalues(n_one, n_two)
spelling::spell_check_package()
install.packages("goodpractice")
spelling::spell_check_package()
library(goodpractice)
spelling::spell_check_package()
devtools::use_readme_rmd()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
library(Counternull)
devtools::install(build_vignettes = TRUE)
q = c(1,3,4,5,6,9)
IQR(q)
q = c("1", "a")
is.numeric(q)
all(is.numeric(q))
n_r = create_null_rand(sample_data$turn_angle, sample_data$w,
sample_matrix, test_stat = c("diffmeans"))
citation("Counternull")
devtools::install_deps()
devtools::test()
a = 0
b = 0
c = 0
ifelse(a == 0, b = 1, c = 1)
ifelse(a == 0, b <- 1, c <- 1)
b
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
devtools::run_examples()
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_oldrelease()
devtools::use_travis()
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
library(Counternull)
library(Counternull)
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_oldrelease()
rhub::check_for_cran()
devtools::check()
devtools::release()
roxygenize(Counternull)
roxygen2::roxygenise()
rm(list = c("create_fisher_interval", "find_counternull_values"))
roxygen2::roxygenise()
devtools::check()
devtools::release()
grep("permutation_counter_function", recursive = TRUE)
grep("permutation_counter_function")
devtools::check()
devtools::release()
devtools::check(args = c('--as-cran'))
devtools::check(remote = TRUE)
load("C:\\Users\\yasmi\\Downloads\\epigenetic.RData")
load("C:\\Users\\yasmi\\Downloads\\w0.RData")
t.rep<-matrix(ncol=1,nrow=19448)
t.obs<-mean(final.first$cg00000029[final.first$exp==1])-mean(final.first$cg00000029[final.first$exp==0])
for(i in 1:19448)
{
t.rep[i]<-mean(final.first$cg00000029[w0[,i]==1])-mean(final.first$cg00000029[w0[,i]==0])
print(i)
}
sum(1*(t.rep>=t.obs))/19448  # .315508
hist(t.rep)
abline(v=t.obs,col="red")
## Counternull
Y.temp<-matrix(ncol=1,nrow=17)
t.rep<-matrix(ncol=1,nrow=19448)
a<-0.018154 # 0.315508
a<-0.018159 # .3154052
for(j in 1:19448)
{
Y.temp<-final.first$cg00000029
for(i in 1:17)
{
if(w0[i,j]==1 & final.first$exp[i]==0){Y.temp[i]<-final.first[i,"cg00000029"]+a}
if(w0[i,j]==0 & final.first$exp[i]==1){Y.temp[i]<-final.first[i,"cg00000029"]-a}
}
t.rep[j,1]<-mean(Y.temp[w0[,j]==1])-mean(Y.temp[w0[,j]==0])
print(j)
}
sum(1*(t.rep<=t.obs))/19448
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
library(Counternull)
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
plot(n_r)
summary(n_r)
debug(find_counternull_values)
c = find_counternull_values(n_r)
search
search[500:]
search[500:1000]
search[9000:10000]
search[8000:9000]
search[7000:8000]
c = find_counternull_values(n_r)
high = 50000
search[49000:50000]
search[30000:31000]
search[45000:46000]
search[42000:43000]
search[40000:41000]
View(search)
search[39000:40000]
search[35000:36000]
search[36000:37000]
search[37000:38000]
find_counternull_values_int=function(obs_c, search, t_obs, y,w,
alternative,rand_matrix,
test_stat, fun,
s){
low = 1
high = 50000
index = (round((low + high) / 2))
counternull_value=search[index] # estimated counternull value
while (low <= high) {
c_s=count(y,w,test_stat, fun, t_obs,
counternull_value,rand_matrix, alternative)
if (any(c_s$counts == obs_c)) { # counternull value is identified
start=counternull_value
# find counternull range
c_range=find_set(counternull_value, search, t_obs, obs_c,
rand_matrix, index, y, w, test_stat,fun, alternative)
counter_samples = c_s$perm
break
} else if (min(obs_c) > c_s$counts ) {
ifelse((alternative == "less" | s == 1),
low<-index + 1, high<-index - 1)
} else {  # c_s$counts > obs_c
ifelse((alternative == "less" | s == 1),
high<-index - 1, low<-index + 1)
}
index = round((low + high) / 2)
counternull_value=search[index]
}
if(low > high){ # no remaining numbers to search
return(invisible(NULL))
}
return(invisible(list(perm = counter_samples,
low = c_range[1], high = c_range[2])))
}
find_counternull_values=function(null_r, counts = NULL, bw = NULL){
if(!inherits(null_r,"null_rand")){
stop('Argument "null_r" must be of class "null_rand".')
}
if(!is.null(bw)){
if(!is.numeric(bw) | length(bw) != 1 | bw <= 0){
stop('Argument "bw" must be a positive numeric scalar.')
}
}
if(is.null(counts)){
counts = null_r$counts
} else {
if(length(counts) != 2){
stop('Argument "counts" must be length 2.')
}
if(!is.numeric(counts)){
stop('Argument "counts" must be a numeric.')
}
if(!(counts[1] <= counts[2])){
stop('Lower bound must be <= to upper bound in argument "counts".')
}
if((counts[1] < 0) | (counts[2] > length(null_r$null_dist))){
stop('Argument "counts" must specify a non-negative range of numbers
no larger than the number of permutations within argument "null_rand".')
}
counts = seq(round(counts[1]), round(counts[2]), by = 1)
if(length(counts) >= .10 * length(null_r$null_dist)){
warning('Argument "counts" exceeds 10% of null
randomization distribution.')
}
}
# bounds are 4 times the observed effect size
low = 1
high = 50000
search=seq(-4*abs(null_r$t_obs),4*abs(null_r$t_obs),
8*abs(null_r$t_obs)/(high-1))
if(null_r$alternative == "two-sided"){
s_p=search[search>=0]
s_n=search[search<0]
p=find_counternull_values_int(counts, search, null_r$t_obs, null_r$y,
null_r$w, null_r$alternative,
null_r$rand_matrix,null_r$test_stat,
null_r$fun, s=0)
n=find_counternull_values_int(counts, search, null_r$t_obs, null_r$y,
null_r$w, null_r$alternative,
null_r$rand_matrix, null_r$test_stat,
null_r$fun, s=1)
if((!is.null(p)) & (!is.null(n))){
# combine the two lists
c_ob = list(counternull_perm = p$perm, low = p$low, high = p$high,
counternull_perm_two= n$perm,
low_two = n$low, high_two = n$high, null_r = null_r,
bw = bw)
} else if((!is.null(p)) & (is.null(n))){
c_ob = list(counternull_perm = p$perm, low = p$low, high = p$high,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
} else if((is.null(p)) & (!is.null(n))){
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = n$perm,
low_two= n$low, high_two = n$high, null_r = null_r,
bw = bw)
} else{
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = NULL,
low_two= NULL, high_two = NULL, null_r = null_r,
bw = bw)
}
} else{
c <- find_counternull_values_int(counts, search, null_r$t_obs,
null_r$y,null_r$w,
null_r$alternative,null_r$rand_matrix,
null_r$test_stat, null_r$fun, s=0)
if(!is.null(c)){
c_ob = list(counternull_perm = c$perm, low = c$low, high = c$high,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
} else{
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
}
}
class(c_ob) = "counternull"
return(invisible(c_ob))
}
#' @export
summary.counternull = function(object, ...){
if(is.null(object$low) & is.null(object$low_two)){
message("No counternull values found.")
}
if(is.null(object$low) & !is.null(object$low_two)){
cat("Counternull Set: [", object$low_two,",", object$high_two,"]")
}
if(!is.null(object$low) & is.null(object$low_two)){
cat("Counternull Set: [", object$low,",", object$high,"]")
}
if(!is.null(object$low) & !is.null(object$low_two)){
cat("Counternull Set (Positive): [", object$low,",",
object$high,"]", "\nCounternull Set (Negative): [", object$low_two,
",", object$high_two,"]")
}
}
#' @export
#' @import ggplot2
#' @import dplyr
plot.counternull=function(x, ...){
# Plots counternull distribution
null_r = x$null_r
bw = x$bw
if(is.null(x$low) & is.null(x$low_two)){
message("No counternull values found.")
return()
}
## Plotting  counter and null distributions
if(is.null(bw)){
bw = 2 * IQR(x$counternull_perm) / length(x$counternull_perm)^(1/3)
# Freedman Diaconis Rule
if(length(x$counternull_perm) >= 30){ # min 30 bins
bw=min(bw,(max(x$counternull_perm) - min(x$counternull_perm))/30)
}
if(bw == 0){
bw = length(x$null_dist)/3
}
}
xx= NULL
group = NULL
if(!is.null(x$low) & !is.null(x$low_two)){
dat = data.frame(xx = c(x$counternull_perm, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm)))
p1= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .8) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution (Positive Set)") +
theme_classic()
plot(p1)
dat = data.frame(xx = c(x$counternull_perm_two, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm_two)))
p2= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .8) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution (Negative Set)") +
theme_classic()
plot(p2)
}
if(is.null(x$low) & !is.null(x$low_two)){
dat = data.frame(xx = c(x$counternull_perm_two, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm_two)))
}
if(!is.null(x$low) & is.null(x$low_two)){
da=data.frame(xx = c(x$counternull_perm, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm)))
}
if((is.null(x$low) & !is.null(x$low_two)) |
(!is.null(x$low) & is.null(x$low_two))){
p1= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .7) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution") +
theme_classic()
plot(p1)
}
}
c = find_counternull_values(n_r)
library(Counternull)
c = find_counternull_values(n_r)
undebug(find_counternull_values)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/count.R")
devtools::load_all(".")
`rm(list = c("find_counternull_values"))`
rm(list = c("find_counternull_values"))
devtools::load_all(".")
c = find_counternull_values(n_r)
summary(c)
devtools::load_all(".")
library(Counternull)
c = find_counternull_values(n_r, width = 3.2)
c = find_counternull_values(n_r, width =100000)
is.integer(100000)
devtools::load_all(".")
c = find_counternull_values(n_r, width =100000)
summary(c)
plot(c)
debug(plot.counternull)
plot(c)
devtools::load_all(".")
plot(c)
undebug(plot.counternull)
plot(c)
debug(plot.counternull)
plot(c)
undebug(plot.counternull)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
undebug(plot.counternull)
plot(c)
summary(c)
library(Counternull)
devtools::load_all(".")
rm(list = c("find_counternull_values"))
devtools::load_all(".")
summary(c)
c = find_counternull_values(n_r, width =200000)
summary(c)
plot(c)
