permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
library(Counternull)
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
counter_samples<-0
counter_samples<-0
counter_samples<-0
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
View(find_counternull_values)
View(find_counternull_values)
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
permuation_counter_function,low,
high,test_stat,
variable, iterations,pairs){
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
while (low <= high) {
counter_samples<-create_counternull_distribution_no_hist(sample_data,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
pval<-sum(counter_samples>=(test_stat))/iterations
if (pval == obs_pval) { # counternull value is identified
start<-counternull_value
# find counternull range
counternull_values<-find_counternull_set(obs_pval,sample_data,extreme,
rand_matrix,counternull_value,
test_stat,
variable_post-variable_pre,
iterations,pairs)
unique(counternull_values)
sort(counternull_values)
print(unique(counternull_values))
# create histograms
perm_samples<-create_null_distribution(sample_data,extreme,rand_matrix,
permutation_null_function,
variable_post-variable_pre,
iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main = paste("Null Distribution"), xlab = "Test Statistics")
counter_hist<-hist(counter_samples,breaks=100,col = "goldenrod",
main = paste("Counternull Distribution"),
xlab = "Test Statistics")
plot(null_hist, col="gold", xlim=c(-15000,15000),
main = paste("Counternull and Null Distribution"),
xlab = "Test Statistics")  # first histogram
plot(counter_hist, col="goldenrod", xlim=c(-15000,15000),add=T)  # second
abline(v=test_stat,col="black",lty=2, lwd=5)
abline(v=start,col="red",lty=2, lwd=5)
abline(v=0,col="gray",lty=2, lwd=5)
break
} else if (pval < obs_pval) {
if (extreme==0){
low<-counternull_value + 1 # only search larger numbers
} else {
high<-counternull_value - 1 # only search smaller numbers
}
counternull_value<-(low + high)%/%2
} else {  # pval > obs_pval
if (extreme==0){
high<-counternull_value - 1 # only search smaller numbers
} else {
low<-counternull_value - 1 # only search larger numbers
}
counternull_value<-(low + high)%/%2
}
}
if(low > high){ # no remaining numbers to search
print("No Counternull Values found.")
perm_samples<-create_null_distribution(sample_data,extreme,
rand_matrix,
permutation_null_function,
variable_post-
variable_pre,iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold")
plot(null_hist, col="gold",xlim=c(-15000,15000),
main = paste("Null Distribution"),
xlab = "Test Statistics")  # first histogram
abline(v=test_stat,col="black",lty=2, lwd=5)
return(0)
}
return(invisible(counter_samples))
}
counternull_value<-2*test_stat # estimated counternull value
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
permuation_counter_function,low,
high,test_stat,
variable, iterations,pairs)
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
View(find_counternull_values)
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
library(Counternull)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
pval<-sum(counter_samples>=(test_stat))/iterations
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
View(find_counternull_values)
View(find_counternull_values)
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
permutation_counter_function,low,
high,test_stat,
variable,iterations,pairs){
counter_samples<-0
counternull_value<-2*test_stat # estimated counternull value
while (low <= high) {
counter_samples<-create_counternull_distribution_no_hist(sample_data,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
pval<-sum(counter_samples>=(test_stat))/iterations
if (pval == obs_pval) { # counternull value is identified
start<-counternull_value
# find counternull range
counternull_values<-find_counternull_set(obs_pval,sample_data,extreme,
rand_matrix,
permutation_counter_function,
counternull_value,
test_stat,
variable,
iterations,pairs)
unique(counternull_values)
sort(counternull_values)
print(unique(counternull_values))
# create histograms
perm_samples<-create_null_distribution(sample_data,extreme,rand_matrix,
permutation_null_function,
variable_post-variable_pre,
iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main = paste("Null Distribution"), xlab = "Test Statistics")
counter_hist<-hist(counter_samples,breaks=100,col = "goldenrod",
main = paste("Counternull Distribution"),
xlab = "Test Statistics")
plot(null_hist, col="gold", xlim=c(-15000,15000),
main = paste("Counternull and Null Distribution"),
xlab = "Test Statistics")  # first histogram
plot(counter_hist, col="goldenrod", xlim=c(-15000,15000),add=T)  # second
abline(v=test_stat,col="black",lty=2, lwd=5)
abline(v=start,col="red",lty=2, lwd=5)
abline(v=0,col="gray",lty=2, lwd=5)
break
} else if (pval < obs_pval) {
if (extreme==0){
low<-counternull_value + 1 # only search larger numbers
} else {
high<-counternull_value - 1 # only search smaller numbers
}
counternull_value<-(low + high)%/%2
} else {  # pval > obs_pval
if (extreme==0){
high<-counternull_value - 1 # only search smaller numbers
} else {
low<-counternull_value - 1 # only search larger numbers
}
counternull_value<-(low + high)%/%2
}
}
if(low > high){ # no remaining numbers to search
print("No Counternull Values found.")
perm_samples<-create_null_distribution(sample_data,extreme,
rand_matrix,
permutation_null_function,
variable_post-
variable_pre,iterations)
null_hist<-hist(perm_samples,breaks=100,col = "gold")
plot(null_hist, col="gold",xlim=c(-15000,15000),
main = paste("Null Distribution"),
xlab = "Test Statistics")  # first histogram
abline(v=test_stat,col="black",lty=2, lwd=5)
return(0)
}
return(invisible(counter_samples))
}
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
find_counternull_values<-function(obs_pval,sample_data,extreme,rand_matrix,
permutation_null_function,
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
View(create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128))
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
View(create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,permutation_counter_diff_means(),-3323,find_test_stat(sample_district_1DS,
+                                                           sample_district_1DS$charge_prosecuted_1000_rate_post -
+                                                               sample_district_1DS$charge_prosecuted_1000_rate_pre),
+                                      sample_district_1DS$charge_prosecuted_1000_rate_post -
+                                          sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,permutation_counter_diff_means(),-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,permutation_counter_diff_means(),-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,permutation_counter_diff_means(),-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,permutation_counter_diff_means(),-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
rm(list=ls())
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
View(create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
View(create_counternull_distribution_no_hist(sample_district_1DS,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R')
library(Counternull)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
library(Counternull)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
library(Counternull)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1D,0,rand_matrix_1D,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1D,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre,10000)
find_test_stat(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
library(Counternull)
find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
print(find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre))
print(find_test_stat_diff_means(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre))
library(Counternull)
create_null_distribution(sample_district_1D,0,rand_matrix_1D,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1D,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre,10000)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
View(create_null_distribution)
View(create_null_distribution)
View(create_null_distribution)
# creates histogram and prints p-value
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main=paste("Null Distribution"), xlab="Test Statistics")
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
# Creates exposure assignments
create_null_distribution<-function(sample_data, extreme, rand_matrix,
permutation_null_function,test_stat,
variable,iterations){
# Creates permutation vector
perm_samples<-permutation_null_function(rand_matrix,variable,iterations)
# creates histogram and prints p-value
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main=paste("Null Distribution"), xlab="Test Statistics")
abline(v=test_stat,col="black",lty=2, lwd=5)
if (extreme==0){ # smaller test statistics are more extreme.
pvalue<-sum(perm_samples<=(test_stat))/iterations
} else { # larger test statistics are more extreme
pvalue<-sum(perm_samples>=(test_stat))/iterations
}
print(test_stat)
print(pvalue)
return(invisible(perm_samples))
}
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
create_null_distribution<-function(sample_data, extreme, rand_matrix,
permutation_null_function,test_stat,
variable,iterations){
# Creates permutation vector
perm_samples<-permutation_null_function(rand_matrix,variable,iterations)
# creates histogram and prints p-value
null_hist<-hist(perm_samples,breaks=100,col = "gold",
main=paste("Null Distribution"), xlab="Test Statistics")
abline(v=test_stat,col="black",lty=2, lwd=5)
if (extreme==0){ # smaller test statistics are more extreme.
pvalue<-sum(perm_samples<=(test_stat))/iterations
} else { # larger test statistics are more extreme
pvalue<-sum(perm_samples>=(test_stat))/iterations
}
print(test_stat)
print(pvalue)
return(invisible(perm_samples))
}
rm(list=ls())
create_null_distribution(sample_district_1D,0,rand_matrix_1D,
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
library(Counternull)
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
debugSource('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
perm_samples<-permutation_null_function(rand_matrix,variable,iterations)
source('C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R')
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1D,0,rand_matrix_1D,
permutation_null_diff_means,find_test_stat_diff_means(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre),
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre,10000)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
permutation_counter_diff_means(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
View(permutation_counter_diff_means(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7))
View(permutation_diff_means(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128))
permutation_null_diff_means(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
View(permutation_null_diff_means(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128))
library(Counternull)
