if(is.null(counts)){
counts = null_r$counts
} else {
if(length(counts) != 2){
stop('Argument "counts" must be length 2.')
}
if(!is.numeric(counts)){
stop('Argument "counts" must be a numeric.')
}
if(!(counts[1] <= counts[2])){
stop('Lower bound must be <= to upper bound in argument "counts".')
}
if((counts[1] < 0) | (counts[2] > length(null_r$null_dist))){
stop('Argument "counts" must specify a non-negative range of numbers
no larger than the number of permutations within argument "null_rand".')
}
counts = seq(round(counts[1]), round(counts[2]), by = 1)
if(length(counts) >= .10 * length(null_r$null_dist)){
warning('Argument "counts" exceeds 10% of null
randomization distribution.')
}
}
# bounds are 4 times the observed effect size
low = 1
high = 50000
search=seq(-4*abs(null_r$t_obs),4*abs(null_r$t_obs),
8*abs(null_r$t_obs)/(high-1))
if(null_r$alternative == "two-sided"){
s_p=search[search>=0]
s_n=search[search<0]
p=find_counternull_values_int(counts, search, null_r$t_obs, null_r$y,
null_r$w, null_r$alternative,
null_r$rand_matrix,null_r$test_stat,
null_r$fun, s=0)
n=find_counternull_values_int(counts, search, null_r$t_obs, null_r$y,
null_r$w, null_r$alternative,
null_r$rand_matrix, null_r$test_stat,
null_r$fun, s=1)
if((!is.null(p)) & (!is.null(n))){
# combine the two lists
c_ob = list(counternull_perm = p$perm, low = p$low, high = p$high,
counternull_perm_two= n$perm,
low_two = n$low, high_two = n$high, null_r = null_r,
bw = bw)
} else if((!is.null(p)) & (is.null(n))){
c_ob = list(counternull_perm = p$perm, low = p$low, high = p$high,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
} else if((is.null(p)) & (!is.null(n))){
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = n$perm,
low_two= n$low, high_two = n$high, null_r = null_r,
bw = bw)
} else{
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = NULL,
low_two= NULL, high_two = NULL, null_r = null_r,
bw = bw)
}
} else{
c <- find_counternull_values_int(counts, search, null_r$t_obs,
null_r$y,null_r$w,
null_r$alternative,null_r$rand_matrix,
null_r$test_stat, null_r$fun, s=0)
if(!is.null(c)){
c_ob = list(counternull_perm = c$perm, low = c$low, high = c$high,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
} else{
c_ob = list(counternull_perm = NULL, low = NULL, high = NULL,
counternull_perm_two = NULL,
low_two = NULL, high_two = NULL, null_r = null_r,
bw = bw)
}
}
class(c_ob) = "counternull"
return(invisible(c_ob))
}
#' @export
summary.counternull = function(object, ...){
if(is.null(object$low) & is.null(object$low_two)){
message("No counternull values found.")
}
if(is.null(object$low) & !is.null(object$low_two)){
cat("Counternull Set: [", object$low_two,",", object$high_two,"]")
}
if(!is.null(object$low) & is.null(object$low_two)){
cat("Counternull Set: [", object$low,",", object$high,"]")
}
if(!is.null(object$low) & !is.null(object$low_two)){
cat("Counternull Set (Positive): [", object$low,",",
object$high,"]", "\nCounternull Set (Negative): [", object$low_two,
",", object$high_two,"]")
}
}
#' @export
#' @import ggplot2
#' @import dplyr
plot.counternull=function(x, ...){
# Plots counternull distribution
null_r = x$null_r
bw = x$bw
if(is.null(x$low) & is.null(x$low_two)){
message("No counternull values found.")
return()
}
## Plotting  counter and null distributions
if(is.null(bw)){
bw = 2 * IQR(x$counternull_perm) / length(x$counternull_perm)^(1/3)
# Freedman Diaconis Rule
if(length(x$counternull_perm) >= 30){ # min 30 bins
bw=min(bw,(max(x$counternull_perm) - min(x$counternull_perm))/30)
}
if(bw == 0){
bw = length(x$null_dist)/3
}
}
xx= NULL
group = NULL
if(!is.null(x$low) & !is.null(x$low_two)){
dat = data.frame(xx = c(x$counternull_perm, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm)))
p1= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .8) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution (Positive Set)") +
theme_classic()
plot(p1)
dat = data.frame(xx = c(x$counternull_perm_two, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm_two)))
p2= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .8) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution (Negative Set)") +
theme_classic()
plot(p2)
}
if(is.null(x$low) & !is.null(x$low_two)){
dat = data.frame(xx = c(x$counternull_perm_two, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm_two)))
}
if(!is.null(x$low) & is.null(x$low_two)){
da=data.frame(xx = c(x$counternull_perm, null_r$null_dist),
group = rep(1:0, each = length(x$counternull_perm)))
}
if((is.null(x$low) & !is.null(x$low_two)) |
(!is.null(x$low) & is.null(x$low_two))){
p1= ggplot(dat,aes(x=xx))+
geom_histogram(data=subset(dat,group=='0'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw) +
geom_histogram(data=subset(dat,group=='1'),aes(fill=factor(group)),
alpha=0.5, binwidth = bw)+
scale_fill_manual(name="group", values=c("steelblue2", "grey69"),
labels=c("Null","Counternull")) +
geom_vline(xintercept = null_r$t_obs,
linewidth = 1.5,
colour = "black", alpha = .7) +
xlab("Permuted Test Statistics") + ylab("Counts") +
guides(fill=guide_legend("Distributions")) +
ggtitle("Counternull Distribution") +
theme_classic()
plot(p1)
}
}
c = find_counternull_values(n_r)
library(Counternull)
c = find_counternull_values(n_r)
undebug(find_counternull_values)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/count.R")
devtools::load_all(".")
`rm(list = c("find_counternull_values"))`
rm(list = c("find_counternull_values"))
devtools::load_all(".")
c = find_counternull_values(n_r)
summary(c)
devtools::load_all(".")
library(Counternull)
c = find_counternull_values(n_r, width = 3.2)
c = find_counternull_values(n_r, width =100000)
is.integer(100000)
devtools::load_all(".")
c = find_counternull_values(n_r, width =100000)
summary(c)
plot(c)
debug(plot.counternull)
plot(c)
devtools::load_all(".")
plot(c)
undebug(plot.counternull)
plot(c)
debug(plot.counternull)
plot(c)
undebug(plot.counternull)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
undebug(plot.counternull)
plot(c)
summary(c)
library(Counternull)
devtools::load_all(".")
rm(list = c("find_counternull_values"))
devtools::load_all(".")
summary(c)
c = find_counternull_values(n_r, width =200000)
summary(c)
plot(c)
library(Counternull)
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
plot(n_r)
summary(n_r)
c = find_counternull_values(n_r, width =100000) # [ 0.01815406 , 0.01815847 ]
summary(c)
plot(c)
library(Counternull)
devtools::load_all(".")
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
plot(n_r)
summary(n_r)
c = find_counternull_values(n_r, width =100000) # [ 0.01815406 , 0.01815847 ]
summary(c)
plot(c)
devtools::test()
y = sample_data$turn_angle
w = sample_data$w
n_r = create_null_rand(y, w, sample_matrix,
test_stat = c("diffmeans"))
y
find_counternull_values(n_r)
debug(find_counternull_values)
find_counternull_values(n_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
find_counternull_values(n_r)
library(Counternull)
n_r = create_null_rand(sample_data$turn_angle, sample_data$w,
sample_matrix, test_stat = c("diffmeans"))
c = find_counternull_values(n_r)
debug(find_counternull_values_int)
c = find_counternull_values(n_r)
debug(find_counternull_values)
c = find_counternull_values(n_r)
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
c = find_counternull_values(n_r, width =100000)
find_counternull_values_int=function(obs_c, search,width, t_obs, y,w,
alternative,rand_matrix,
test_stat, fun,
s){
low = 1
high = width
index = (round((low + high) / 2))
counternull_value=search[index] # estimated counternull value
while (low <= high) {
c_s=count(y,w,test_stat, fun, t_obs,
counternull_value,rand_matrix, alternative)
if (any(c_s$counts == obs_c)) { # counternull value is identified
start=counternull_value
# find counternull range
c_range=find_set(counternull_value, search, t_obs, obs_c,
rand_matrix, index, y, w, test_stat,fun, alternative)
counter_samples = c_s$perm
break
} else if (min(obs_c) > c_s$counts ) {
ifelse((alternative == "less" | s == 1),
low<-index + 1, high<-index - 1)
} else {  # c_s$counts > obs_c
ifelse((alternative == "less" | s == 1),
high<-index - 1, low<-index + 1)
}
index = round((low + high) / 2)
counternull_value=search[index]
}
if(low > high){ # no remaining numbers to search
return(invisible(NULL))
}
return(invisible(list(perm = counter_samples,
low = c_range[1], high = c_range[2])))
}
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
debug(find_counternull_values_int)
debug(find_counternull_values)
c = find_counternull_values(n_r, width =100000)
undebug(find_counternull_values_int)
undebug(find_counternull_values)
c = find_counternull_values(n_r, width =100000)
devtools::load_all(".")
rm(list = c("find_counternull_values"))
devtools::load_all(".")
c = find_counternull_values(n_r, width =100000)
summary(c)
n_r = create_null_rand(sample_data$turn_angle, sample_data$w,
sample_matrix, test_stat = c("diffmeans"))
c = find_counternull_values(n_r)
summary(c)
create_fisher_interval(n_r)
expected = create_fisher_interval(n_r)
summary(expected)
plot(expected)
fisher = create_fisher_interval(n_r, width = 100000)
summary(fisher)
plot(fisher)
devtools::test()
devtools::test_coverage()
library(Counternull)
devtools::test_coverage()
covr::package_coverage()
covr::package_coverage()
devtools::test_coverage()
library(Counternull)
devtools::test()
y = sample_data$turn_angle
w = sample_data$w
n_r = create_null_rand(y, w, sample_matrix,
test_stat = c("diffmeans"))
find_counternull_values(n_r,width = c(10000,100))
find_counternull_values(n_r,width = -100)
c = find_counternull_values(n_r,width = -100)
summary(c)
library(Counternull)
devtools::test()
library(Counternull)
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
devtools::run_examples()
devtools::check()
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_oldrelease()
devtools::use_travis()
devtools::release()
library(Counternull)
n_r = create_null_rand(final.first$cg00000029,final.first$exp,w0,test_stat = c("diffmeans"),alternative="greater")
plot(n_r)
summary(n_r)
c = find_counternull_values(n_r, width =100000)
summary(c)
plot(c)
fisher = create_fisher_interval(n_r, width = 100000)
summary(fisher)
plot(fisher)
summary(n_r)
fisher_d = create_fisher_interval(n_r)
summary(fisher_d)
summary(fisher)
debug(fisher_binary)
debug(create_fisher_interval)
fisher_d = create_fisher_interval(n_r)
low_c
low_c
high_c
debug(fisher_binary)
fisher = create_fisher_interval(n_r, width = 50000)
ls[1]
ls[2]
create_fisher_interval=function(null_r,alpha=NULL,width = NULL){
if(is.null(alpha)){
alpha = .05
}
if(!(alpha > 0 & alpha < 1)){
stop('Argument "alpha" must be between 0 and 1.')
}
if(!inherits(null_r, "null_rand")){
stop('Argument "null_r" must be of "null_rand" class.' )
}
if(!is.null(width)){
if(!is.numeric(width) | length(width) != 1){
stop('Argument "width" must be an integer.')
}
}
bounds=vector(length=2)
low_c=(alpha/2)*length(null_r$null_dist)
high_c=(1-(alpha/2))*length(null_r$null_dist)
#  initial bounds are 4 times the observed effect size
low = 1
if(!is.null(width)){
high = max(10000, width)
} else{
high = 10000
}
bounds_l = -4*abs(null_r$t_obs)
bounds_h = 4*abs(null_r$t_obs)
i = 0
search=seq(bounds_l,bounds_h, (bounds_h - bounds_l)/(high-1))
counts_b = sapply(c(search[1], search[length(search)]),fisher_count_wrapper,
y =null_r$y, w=null_r$w, test_stat =null_r$test_stat,
fun = null_r$fun, t_obs = null_r$t_obs,
rand_matrix= null_r$rand_matrix, alternative = c("less"))
## expand up to 16 times
while((counts_b[1] >= low_c | counts_b[2] <= high_c) & i < 2){
if(counts_b[1] > 0){
bounds_l = 2 * bounds_l
}
if(counts_b[2] < length(null_r$null_dist)){
bounds_h = 2 * bounds_h
}
search=seq(bounds_l,bounds_h, (bounds_h - bounds_l)/(high-1))
counts_b = sapply(c(search[1], search[length(search)]),
fisher_count_wrapper,
y =null_r$y, w=null_r$w, test_stat =null_r$test_stat,
fun = null_r$fun, t_obs = null_r$t_obs,
rand_matrix= null_r$rand_matrix, alternative = c("less"))
i = i + 1
}
ls=fisher_binary(search,high, low_c, high_c, null_r$y,null_r$w,
null_r$test_stat,null_r$fun,
t_obs=null_r$t_obs, rand_matrix=null_r$rand_matrix)
bounds = unlist(ls[1])
pval_bounds = unlist(ls[2])
if(pval_bounds[1] != (alpha/2) | pval_bounds[2] != (1 - (alpha/2))){
warning('Fisher Interval coverage is smaller than specified. Use
summary() for more info.')
}
f=list(lower_bound = bounds[1], upper_bound = bounds[2], alpha = alpha,
pvalue_lower = pval_bounds[1], pvalue_upper = pval_bounds[2],
range = c(bounds_l, bounds_h), null_r = null_r)
class(f) = "fisher_interval"
return(invisible(f))
}
#' @export
summary.fisher_interval = function(object, ...){
cat("Fisher Interval: [", object$lower_bound,",", object$upper_bound,"]",
"\nAlpha:", object$alpha,
"\nP-Value Lower:", object$pvalue_lower, "P-Value Upper:",
object$pvalue_upper)
}
#' @export
#' @import ggplot2
#' @import dplyr
#' @import tidyr
plot.fisher_interval=function(x, ...){ # Plots Fisher Interval
null_r = x$null_r
bounds_l = x$range[1]
bounds_h = x$range[2]
search=seq(bounds_l,bounds_h, (bounds_h - bounds_l)/(100-1))
counts = sapply(search,fisher_count_wrapper,
y = null_r$y, w=null_r$w, test_stat = null_r$test_stat,
fun = null_r$fun,
t_obs = null_r$t_obs, rand_matrix= null_r$rand_matrix,
alternative = c("less"))
## plot
effect = NULL
pvalue = NULL
data_plot = data.frame(effect = search,
pvalue = counts/length(null_r$null_dist))
p3 =
ggplot(data_plot, aes(x = effect, y = pvalue)) +
geom_hline(yintercept = (x$alpha/2), colour = 'darkorange2',
linewidth = 1.2, linetype = "dashed") +
geom_hline(yintercept = (1-(x$alpha/2)), colour = 'darkorange2',
linewidth = 1.2, linetype = "dashed")+
ylim(0,1) +
geom_line(colour = 'mediumblue', linewidth = 1.2) +
xlab("Hypothetical Constant Treatment Effects") + ylab("p-values") +
ggtitle("Fisher Interval") +
theme_bw()
# display the graph
plot(p3)
}
fisher_d = create_fisher_interval(n_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
fisher_d = create_fisher_interval(n_r)
summary(fisher_d)
fisher = create_fisher_interval(n_r, width = 50000)
summary(fisher)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
fisher = create_fisher_interval(n_r, width = 50000)
fisher = create_fisher_interval(n_r, width = 50000)
low_c
ncol(rand_matrix)
ncol(rand_matrix)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
fisher = create_fisher_interval(n_r, width = 50000)
debug(fisher_binary)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
fisher = create_fisher_interval(n_r, width = 50000)
debugSource("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/fisher_binary.R")
fisher = create_fisher_interval(n_r, width = 50000)
bounds
summary(fisher_d)
fisher = create_fisher_interval(n_r, width = 100000)
summary(fisher)
devtools::test()
rm(list = c("create_fisher_interval"))
devtools::run_examples()
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_oldrelease()
devtools::release()
spell_check()
devtools::spell_check()
devtools::release()
3
devtools::release()
