create_counternull_distribution(zebra,0,fish_rand,permutation_counter_diff_means,.0735,test_stat,variable,512,9)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_counternull_distribution.R")
library(Counternull)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_t,
-3127,find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
debug(create_counternull_distribution)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_t,
-3127,find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
print(find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_t,permutation_counter_t,
-8000,0, find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7,5,0,1)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_t,
find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7,5,0,1)
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1DS.rda")
library(Counternull)
permutation_null_t(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
print(permutation_null_t(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128))
permutation_null_paired_t(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
print(permutation_null_paired_t(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
)
permutation_null_diff_means(rand_matrix_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
library(Counternull)
permutation_counter_t(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
permutation_counter_paired_t(sample_district_1DS, rand_matrix_1DS, -3323,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
find_test_stat_t(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre)
find_test_stat_paired_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
find_test_stat_paired_t(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre)
find_test_stat_cohens_d(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
find_test_stat_cohens_d(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre)
create_null_distribution(zebra,0,fish_rand,permutation_null_diff_means,test_stat,variable,512)
library(Counternull)
create_null_distribution(zebra,0,fish_rand,permutation_null_diff_means,test_stat,variable,512)
library(Counternull)
create_null_distribution(zebra,0,fish_rand,permutation_null_diff_means,test_stat,variable,512)
b<-8
print(b)
paste("This is",b)
print(paste("This is",b))
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_null_distribution.R")
create_null_distribution(zebra,0,fish_rand,permutation_null_diff_means,test_stat,variable,512)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_t,
find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_null_cohens_d,
find_test_stat_cohens_d(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128)
create_null_distribution(sample_district_1D,0,rand_matrix_1D,
permutation_null_diff_means,
find_test_stat_diff_means(sample_district_1D,
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre),
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre,10000)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_diff_means,
-3323,find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_t,
-3127,find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_paired_t,
-3127,find_test_stat_paired_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
create_counternull_distribution(zebra,0,fish_rand,permutation_counter_diff_means,.0735,test_stat,variable,512,9)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_diff_means,permutation_counter_diff_means,
-8000,0, find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7,5,0,1)
create_counternull_distribution(sample_district_1DS,0,rand_matrix_1DS,
permutation_counter_t,
-3127,find_test_stat_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7)
find_counternull_values(.375,sample_district_1DS,0,rand_matrix_1DS,
permutation_null_paired_t,permutation_counter_paired_t,
-8000,0, find_test_stat_paired_t(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre),
sample_district_1DS$charge_prosecuted_1000_rate_post-
sample_district_1DS$charge_prosecuted_1000_rate_pre,128,7,5,0,1)
library(Counternull)
Sweave("article.Rnw")
library(Counternull)
6!/(3!*3!)
test<-c(1,2,3,4,5)
sample(test)
sample(test)
sample(test)
test<-c(1,1,1,0,0,0)
sample(test)
sample(test)
sample(test)
units<-6
test<-vector(6)
test<-vector()
test<-vector(length=6)
print(test)
vector[1:units/2]<-1
test[1:units/2]<-1
print(test)
test_m<-matrix(ncol=10,nrow=6)
View(test_m)
test_m[,1]<-test
View(test_m)
library(Counternull)
library(Counternull)
a<-create_randomization_matrix(sample_district_1DS,10000,7,1)
View(a)
debug(create_randomization_matrix)
a<-create_randomization_matrix(sample_district_1DS,10000,7,1)
View(rand)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_randomization_matrix.R")
library(Counternull)
a<-create_randomization_matrix(sample_district_1DS,10000,7,1)
View(a)
a<-create_randomization_matrix(sample_district_1DS,10000,14,1)
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
debug(create_randomization_matrix)
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
library(Counternull)
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
View(a)
debug(create_randomization_matrix)
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_randomization_matrix.R")
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
debug(create_randomization_matrix)
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_randomization_matrix.R")
a<-create_randomization_matrix(sample_district_1DS,10000,14,0)
View(a)
View(sample_district_1D)
rm(list = ls())
library(Counternull)
View(sample_district_1D)
View(sample_district_1DS)
sample_data <- read.table(file ="C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\dataset.csv", header = T, sep = ",", stringsAsFactors = T)
sample_district_1DS<-subset(sample_data,district=="1Ds") # shows data in sample police district
sample_district_1DS<-sample_district_1DS[order(sample_district_1DS$block_id),] # puts data in order of block ID
readr::write_csv(sample_district_1DS, file="inst/extdata/sample_district_1DS.csv")
usethis::use_data(sample_district_1DS, compress = "xz")
TRUE
library(Counternull)
rm(list = ls())
library(Counternull)
View(sample_district_1D)
View(sample_district_1DS)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data-raw/create_sample_district_1DS.R")
TRUE
library(Counternull)
View(sample_district_1DS_r)
View(sample_district_1DS)
rm(list = ls())
library(Counternull)
View(sample_district_1DS)
View(sample_district_1D)
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1DS.rda")
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1D.rda")
# Loads sample police data
# Data taken from "https://www.pnas.org/content/116/21/10329"
sample_data <- read.table(file ="C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\dataset.csv", header = T, sep = ",", stringsAsFactors = T)
sample_district_1DS<-subset(sample_data,district=="1Ds") # shows data in sample police district
sample_district_1DS<-sample_district_1DS[order(sample_district_1DS$block_id),] # puts data in order of block ID
readr::write_csv(sample_district_1DS, file="inst/extdata/sample_district_1DS.csv")
usethis::use_data(sample_district_1DS, compress = "xz")
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1DS.rda")
rm(list = ls())
library(Counternull)
View(sample_district_1D)
View(sample_district_1DS)
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1DS.rda")
View(sample_district_1DS)
load("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data/sample_district_1DS.rda")
print(sample_district_1DS)
print(sample_district_1DS$block_id)
rm(list = ls())
library(Counternull)
library(Counternull)
print(sample_district_1DS$block_id)
rm(list = ls())
sample_data <- read.table(file ="C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\dataset.csv", header = T, sep = ",", stringsAsFactors = T)
sample_district_1DS_p<-subset(sample_data,district=="1Ds") # shows data in sample police district
sample_district_1DS<-sample_district_1DS_p[order(sample_district_1DS_p$block_id),] # puts data in order of block ID
readr::write_csv(sample_district_1DS, file="inst/extdata/sample_district_1DS.csv")
usethis::use_data(sample_district_1DS, compress = "xz")
library(Counternull)
print(sample_district_1DS$block_id)
print(sample_district_1DS_p$block_id)
rm(list = ls())
library(Counternull)
sample_district_1DS$charge_prosecuted_1000_rate_post[sample_district_1DS$z=="1"]
mean(sample_district_1DS$charge_prosecuted_1000_rate_post)[sample_district_1DS$z=="1"]
mean(sample_district_1DS$charge_prosecuted_1000_rate_post)[sample_district_1DS$z=="0"]
variable<-sample_district_1DS$charge_prosecuted_1000_rate_post-sample_district_1DS$charge_prosecuted_1000_rate_pre
mean((variable)[sample_data[,1]=="1"]
)
mean((variable)[sample_district_1DS[,1]=="1"])
debug(find_test_stat_diff_means)
find_test_stat_diff_means(sample_district_1DS,
sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre)
create_randomization_matrix(sample_district_1DS,10000,14,1)
rand_matrix_1DS
View(rand_matrix_1DS)
num.cols(rand_matrix_1DS)
ncol(rand_matrix_1DS)
install.packages(randomizr)
install.packages("randomizr")
library(randomizr)
declare_ra(14,rep(c(1,2,3,4,5,6,7), each=2))
obtain_permutation_matrix(declare_ra(14,rep(c(1,2,3,4,5,6,7), each=2)), 128)
m<-obtain_permutation_matrix(declare_ra(14,rep(c(1,2,3,4,5,6,7), each=2)), 128)
View(m)
w<-m[m=0]<--1
m[m=0]<--1
w<-m
w[w== 0]<- -1
View(w)
w<-m
w[w==0]
w[w < 1]<- -1
View(w)
w<- m
typeof(w)
w<-as.matrix(w)
typeof(w)
View(w)
matrix(w)
w<-matrix(w)
w<-m
x<w
X<-w
X[X < .1] <- 0
X[X < .1 ] <- -1
w[w < 1] <- -1
View(w)
install.packages("ri2")
library(ri2)
d>-declare_ra(blocks = rep(c(1,2,3,4,5,6,7),each = 2))
d<-declare_ra(blocks = rep(c(1,2,3,4,5,6,7),each = 2))
library(Counternull)
conduct_ri(declaration = d)
conduct_ri(data = sample_district_1DS,declaration = d)
conduct_ri(data = sample_district_1DS,declaration = d, formula = charge_prosecuted_1000_rate_post -
charge_prosecuted_1000_rate_pre )
conduct_ri(data = sample_district_1DS,declaration = d, formula = (sample_district_1D,
conduct_ri(data = sample_district_1DS,declaration = d, formula = (
sample_district_1D$charge_prosecuted_1000_rate_post -
sample_district_1D$charge_prosecuted_1000_rate_pre))
test<-function(sample_data){
variable<- sample_data$charge_prosecuted_1000_rate_post -
sample_data$charge_prosecuted_1000_rate_pre
# mean for experimental group (exposed)
on_mean <-mean((variable)[sample_data[,1]=="1"])
# mean for control group (non exposure)
off_mean <-mean((variable)[sample_data[,1]=="0"])
# difference
test_stat<-on_mean - off_mean
return(invisible(test_stat))
}
conduct_ri(data = sample_district_1DS,declaration = d, test_function =test)
out<-conduct_ri(data = sample_district_1DS,declaration = d, test_function =test)
plot(out)
plot(out)
out<-conduct_ri(data = sample_district_1DS,declaration = d, test_function =test, p = "upper")
plot(out)
summary(out)
1-.6875
install.packages(dyplr)
install.packages('dyplr;)
install.packages('dyplr')
install.packages('dyplr')
devtools::document()
'C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull.Rcheck/00check.log'
install.packages('devtools')
devtools::document()
devtools::document()
devtools::document()
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all()
devtools::check()
library(Counternull)
pkgbuild::check_build_tools(debug = TRUE)
install.packages('rtools')
install.packages('RTools')
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
R.version
install.packages('installr')
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
library(installr)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
uninstall.packages('devtools')
devtools::check()
usethis::use_package("randomizr")
rand = read.table("C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\Zebrafish\\size_new\\rand_one_z_3.rdata")
rand = read.table("C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\Zebrafish\\size_new\\rand_one_z_3.rdata")
rand = read.table("C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\Zebrafish\\size_new\\rand_one_z_3.rdata")
rand_small = rand[,1:1000]
library("readxl")
white_zebra<-read_excel("C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\Zebrafish\\moving_white\\df_zebrafish_sinegrating_moving_white_percentage_correct_turn.xlsx")
sine_zebra<-read_excel("C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\Zebrafish\\sinegrating\\df_zebrafish_sinegrating_percentage_correct_turn.xlsx")
sub_w<-subset(white_zebra,white_zebra$position_bin==3)
sub_s<-subset(sine_zebra,sine_zebra$position_bin==3)
####################### Stim 1 and 3
sub_w<-subset(white_zebra,white_zebra$position_bin==3)
sub_s<-subset(sine_zebra,sine_zebra$position_bin==3)
sub_w<-subset(sub_w,stim_index==1 |stim_index==3 )
sub_s<-subset(sub_s,stim_index==1 | stim_index==3)
## Remove fish
# 39 fish
sub_s<-subset(sub_s,(fish_index!= 0 & fish_index!= 1 & fish_index!= 2 )) # 39
## Multiply right stimuli by -1
right_w<-subset(sub_w, stim_index == 3)
right_w$average_turn_angle =right_w$average_turn_angle  * -1
sub_w[sub_w$stim_index == 3, ] <- right_w
right_s<-subset(sub_s, stim_index == 3)
right_s$average_turn_angle =right_s$average_turn_angle  * -1
sub_s[sub_s$stim_index == 3, ] <- right_s
#################################################
test_stat_one<-mean(sub_w$average_turn_angle - sub_s$average_turn_angle) # test statistic: mean difference
test_stat_zero<-mean(sub_w$percentage_correct_turn - sub_s$percentage_correct_turn)
test_stat_one
test_stat_zero
# reorder data
combine<-rbind(sub_w,sub_s)
w=rep(1:0, each=78)
y = combine$average_turn_angle
null_size = create_null_rand(y,w,rand_small,test_stat = "diffmeans", alternative = "two-sided")
library(Counternull)
null_size = create_null_rand(y,w,rand_small,test_stat = "diffmeans", alternative = "two-sided")
summary(null_size)
c = find_counternull_values(null_size)
summary(c)
write.table(rand_small, file = "C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\sample_matrix.rda")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data-raw/create_sample_matrix.R")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/data-raw/create_sample_matrix.R")
n_rand = create_null_rand(y, w, sample_matrix, test_stat)
library(Counternull)
y = sample_data$turn_angle # fish turn angles
w = sample_data$w # treatment assignments (1 = exposed, 0 = control)
test_stat = "diffmeans" # average difference in the turn angles between the
# two groups of fish
cat(find_test_stat(y, w, test_stat))
library(Counternull)
y = sample_data$turn_angle # fish turn angles
w = sample_data$w # treatment assignments (1 = exposed, 0 = control)
test_stat = "diffmeans" # average difference in the turn angles between the
# two groups of fish
cat(find_test_stat(y, w, test_stat))
library(Counternull)
y = sample_data$turn_angle
y
library(Counternull)
sample_data
View(sample_data)
View(sample_matrix)
# Loads sample data
sample_data <- read.table(file ="C:\\Users\\yasmi\\OneDrive\\My Documents\\Harvard2021\\sample_data.csv", header = T, sep = ",", stringsAsFactors = T)
readr::write_csv(sample_data, file="inst/extdata/sample_data.csv")
usethis::use_data(sample_data, compress = "xz")
overwrite = TRUE
library(Counternull)
View(sample_data)
library(Counternull)
y = sample_data$turn_angle # fish turn angles
w = sample_data$w # treatment assignments (1 = exposed, 0 = control)
test_stat = "diffmeans" # average difference in the turn angles between the
# two groups of fish
cat(find_test_stat(y, w, test_stat))
library(Counternull)
y = sample_data$turn_angle # fish turn angles
w = sample_data$w # treatment assignments (1 = exposed, 0 = control)
test_stat = "diffmeans" # average difference in the turn angles between the
# two groups of fish
cat(find_test_stat(y, w, test_stat))
n_rand = create_null_rand(y, w, sample_matrix, test_stat)
summary(n_rand)
plot(n_rand)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/create_fisher_interval.R")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
library(Counternull)
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
library(Counternull)
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values_int.R")
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
summary(c)
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
summary(c)
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
source("C:/Users/yasmi/OneDrive/My Documents/Harvard2021/Counternull/R/find_counternull_values.R")
n_r = create_null_rand(sample_district_1DS$charge_prosecuted_1000_rate_post -
sample_district_1DS$charge_prosecuted_1000_rate_pre, sample_district_1DS$Z,
rand_matrix_1DS, test_stat = c("diffmeans"), alternative = c("less"),
bw = 200)
c = find_counternull_values(n_r)
summary(c)
sort(c(2,1))
library(Counternull)
